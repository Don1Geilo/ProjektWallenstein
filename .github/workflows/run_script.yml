name: Wallenstein Pipeline

on:
  workflow_dispatch:
  schedule:
    - cron: "5 7-21 * * 1-5"  # läuft jede Stunde 07–21 UTC (08–22 lokal)

concurrency:
  group: wallenstein-pipeline
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"
  TZ: "Europe/Berlin"
  WALLENSTEIN_DB_PATH: data/wallenstein.duckdb
  WALLENSTEIN_YF_SLEEP: "0.6"  # Backoff for yfinance rate limits
  DEBUG: "0"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      # Telegram (optional)
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}

      # Reddit
      REDDIT_CLIENT_ID:     ${{ secrets.REDDIT_CLIENT_ID }}
      REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
      REDDIT_USER_AGENT:    ${{ secrets.REDDIT_USER_AGENT }}

      # HuggingFace
      HUGGINGFACE_HUB_TOKEN: ${{ secrets.HUGGINGFACE_HUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements-base.txt
            requirements-ml.txt
            requirements.txt
            **/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements-base.txt

      - name: Prepare folders
        run: mkdir -p data stockOverview

      - name: Cache NLTK data
        uses: actions/cache@v4
        with:
          path: nltk_data
          key: ${{ runner.os }}-nltk-${{ hashFiles('requirements-base.txt', 'requirements-ml.txt') }}
        continue-on-error: true

      - name: Restore previous DuckDB (optional)
        uses: actions/download-artifact@v4
        with:
          name: duckdb
          path: data
        continue-on-error: true

      # Falls versehentlich eine .env im Repo liegt: nicht die Secrets überschreiben lassen
      - name: Neutralize local .env on CI
        run: |
          if [ -f .env ]; then
            echo "Found .env -> removing to avoid overriding secrets"
            rm .env
          else
            echo "No .env present."
          fi

      # --- DEBUG 1: Branch, Commit, Tree
      - name: Show branch & tree
        if: env.DEBUG == '1'
        run: |
          echo "::group::Branch & tree"
          echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Commit: $(git rev-parse HEAD)"
          echo "Repo root:"
          ls -la
          echo "Package dir (wallenstein):"
          ls -la wallenstein || true
          echo "wallenstein files:"
          find wallenstein -maxdepth 2 -type f -name "*.py" -print | sort || true
          echo "::endgroup::"

      # --- DEBUG 2: ENV Sanity (ohne Werte zu leaken)
      - name: Sanity check env (masked)
        if: env.DEBUG == '1'
        run: |
          echo "::group::Env sanity"
          for v in REDDIT_CLIENT_ID REDDIT_CLIENT_SECRET REDDIT_USER_AGENT TELEGRAM_BOT_TOKEN TELEGRAM_CHAT_ID; do
            printf "%-20s %s\n" "$v:" "$([ -n "${!v}" ] && echo set || echo MISSING)"
          done
          echo "::endgroup::"

      # --- DEBUG 3: Zeig die tatsächliche config.py auf dem Runner
      - name: Show wallenstein/config.py (first 160 lines)
        if: env.DEBUG == '1'
        run: |
          echo "::group::wallenstein/config.py (head)"
          sed -n '1,160p' wallenstein/config.py || true
          echo "::endgroup::"

      # --- DEBUG 4: Welche Datei importiert Python wirklich?
      - name: Python import probe (wallenstein.config)
        if: env.DEBUG == '1'
        run: |
          echo "::group::Import probe"
          python - <<'PY'
          import importlib, os
          m = importlib.import_module("wallenstein.config")
          print("Imported module:", m.__name__)
          print("From file      :", getattr(m, "__file__", "?"))
          print("Values preview :")
          for k in ("CLIENT_ID", "CLIENT_SECRET", "USER_AGENT",
                    "GOOGLE_API_KEYFILE", "GOOGLE_SHEETS_ID",
                    "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"):
              print(f"  {k:18} ", "SET" if bool(getattr(m, k, None)) else "MISSING")
          print("has_reddit()   :", getattr(m, "has_reddit", lambda: None)())
          print("has_telegram() :", getattr(m, "has_telegram", lambda: None)())
          PY
          echo "::endgroup::"

      # --- DEBUG 5 (optional): PRAW-Version
      - name: Show PRAW version
        if: env.DEBUG == '1'
        run: |
          echo "::group::PRAW version"
          python - <<'PY'
          try:
              import pkg_resources
              print("PRAW:", pkg_resources.get_distribution('praw').version)
          except Exception as e:
              print("PRAW not installed or unknown version:", e)
          PY
          echo "::endgroup::"
    
      - name: Run Wallenstein with retries
        id: run_wallenstein
        shell: bash
        run: |
          set -e
          echo "Start Wallenstein..."
          n=0
          until [ $n -ge 3 ]; do
            python main.py && break
            n=$((n+1))
            echo "Run failed ($n). Sleeping and retrying..."
            sleep $((30*n))
          done

      - name: Upload CSV artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stockOverview-${{ github.run_id }}
          path: stockOverview/*.csv
          if-no-files-found: warn
          retention-days: 7

      - name: Persist DuckDB
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: duckdb
          path: data/*.duckdb
          if-no-files-found: warn
          retention-days: 3

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.run_id }}
          path: logs/
          if-no-files-found: ignore
          retention-days: 7
